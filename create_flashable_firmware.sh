#!/bin/bash

if [ $# -eq 0 ]; then
    echo -e "Usage: xiaomi-firmware-creator.sh [ROM_FILE] [output directory]"
    echo "Description: Create flashable firmware update zips from MIUI recovery ROM zip"
    echo -e "  If no output directory is given then the firmware-update zipfile is stored in the location of the ROM zipfile"
    exit 1
fi

# FUNCTIONS

abort () {
    echo -e "$@ \nAborting..."
    rm -rf $TMPDIR2 >/dev/null 2>&1
    exit 1
}

check_dependencies () {

    #check if running script from within Termux
    type bash 2>&1 | grep -iq "com.termux" || abort "This script was only written to work with Termux"

    # if zip utility is not available then install it
    type zip >/dev/null 2>&1 || echo "Installing zip"; yes | pkg install zip >/dev/null 2>&1
    if [ ! $? -eq 0 ]; then abort "Unable to install zip utility. Check your internet connection"; fi

    # if using BusyBox unzip then install latest unzip utility from Termux repositories
    unzip 2>&1 | grep -iq "busybox" && echo "Installing unzip"; yes | pkg install unzip >/dev/null 2>&1
    if [ ! $? -eq 0 ]; then abort "Unable to install required unzip utility. Check your internet connection"; fi

}

creatupscrpt() {
DATE=$(date "+%Y-%m-%d %H:%M:%S")
DEVICEMODEL=$(getprop ro.product.model)
DEVICENAME=$(getprop ro.product.name)

    cat > $2 << EOF
$(cat $1 | awk '/getprop/ && /ro.product.device/')
$(cat $1 | awk '/ui_print/ && /Target:/')
show_progress(0.200000, 10);

# Generated by Xiaomi Flashable Firmware Creator on:
# - $DATE
# - $DEVICEMODEL
# - $DEVICENAME

ui_print("Patching firmware images...");
$(cat $1 | awk '/package_extract_file/ && /firmware-update\//')

show_progress(0.100000, 2);
set_progress(1.000000);
EOF

    if grep -wq "/firmware/image/sec.dat" "$2"
    then
        sed -i "s|/firmware/image/sec.dat|/dev/block/bootdevice/by-name/sec|g" "$2"
    elif grep -wq "/firmware/image/splash.img" "$2"
    then
        sed -i "s|/firmware/image/splash.img|/dev/block/bootdevice/by-name/splash|g" "$2"
    fi
}

echo -e "\n#####################################################"
echo "#### On Device Flashable Xiaomi Firmware Creator ####"
echo -e "#####################################################\n"

# INITIAL SETUP AND CLEANUP

echo -e "**Initializing..."
check_dependencies

TMPDIR2=$TMPDIR/fw_extract # $TMPDIR is a Termux environment variable for its /tmp directory
rm -rf $TMPDIR2 >/dev/null 2>&1
mkdir $TMPDIR2
if [ ! $? -eq 0 ]; then abort "Unable to to create TMP directory"; fi

MIUI_ZIP_NAME=$(basename $1)
MIUI_ZIP_DIR=$(dirname $1)

if [ ! -z ${2+x} ]; then
    OUTPUT_DIR=$2
else
    OUTPUT_DIR=$MIUI_ZIP_DIR
fi

# BEGIN UNZIP

echo -e "\n**Unzipping MIUI..."
unzip -q $MIUI_ZIP_DIR/$MIUI_ZIP_NAME 'firmware-update/*' 'META-INF/*' -d $TMPDIR2

if [ ! $? -eq 0 ]; then abort "Unable to extract required files from $1"; fi

# CHECK IF "update-binary" AND "updater-script" ARE PRESENT

if [ ! -f $TMPDIR2/META-INF/com/google/android/update-binary ] || [ ! -f $TMPDIR2/META-INF/com/google/android/updater-script ]; then abort "** Could not find the update-binary or updater-script in the ROM zip file"; fi

# MODIFY "updater-script"

codename=$(cat $TMPDIR2/META-INF/com/google/android/updater-script | grep -i "xiaomi/" | cut -d / -f2)
echo -e "**Generating updater-script for $codename..."

mv $TMPDIR2/META-INF/com/google/android/updater-script $TMPDIR2/META-INF/com/google/android/updater-script-old
creatupscrpt $TMPDIR2/META-INF/com/google/android/updater-script-old $TMPDIR2/META-INF/com/google/android/updater-script
rm $TMPDIR2/META-INF/com/google/android/updater-script-old

# ZIP ONLY THE REQUIRED FILES, TEST ZIPFILE INTEGRITY AND MOVE THE ZIPFILE TO OUTPUT DIRECTORY

LASTLOC=$(pwd)
cd $TMPDIR2
echo -e "**Creating firmware zip from: $MIUI_ZIP_NAME \n**Please wait..."
zip -q -r9 -T $TMPDIR2/fw_$codename"_"$MIUI_ZIP_NAME META-INF/com/google/ firmware-update/
if [ ! "$?" -eq 0 ]; then abort "Zip failed."; fi

cd $LASTLOC
mv $TMPDIR2/fw_$codename"_"$MIUI_ZIP_NAME $OUTPUT_DIR
if [ ! "$?" -eq 0 ]; then abort "Could not save to destination."; fi

# CLEANUP

rm -rf $TMPDIR2
echo -e "\nAll Done!\n"
exit 0
